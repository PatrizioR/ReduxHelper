using Fluxor;
using Microsoft.Extensions.Logging;
using System;
using System.Net.Http;
using System.Threading.Tasks;
using {namespace}.{actionsFolder}.{actionName};

namespace {namespace}.{effectsFolder}
{
    public class {actionName}Effect : BaseEffect<{actionName}Action, {actionName}SuccessAction, {actionName}FailureAction>
    {
      public {actionName}Effect(ILogger<BaseEffect<{actionName}Action, {actionName}SuccessAction, {actionName}FailureAction>> logger, HttpClient httpClient, IClientRepository clientRepository) : base(logger, httpClient, clientRepository)
      {
      }
      public {actionName}Effect(ILogger<{actionName}Effect> logger, HttpClient httpClient, IClientRepository clientRepository) =>
            (_logger, _httpClient, _clientRepository) = (logger, httpClient, clientRepository);

        protected override async Task HandleEffectAsync({actionName}Action action, IDispatcher dispatcher)
        {
            logger.LogInformation($"Start...");
            // TODO logic
            logger.LogInformation("successfully!");
            dispatcher.Dispatch(new {actionName}SuccessAction());
        }
    }
}
